import pandas as pd
import numpy as np
import streamlit as st

st.set_page_config(page_title="C√°lculo Previdenci√°rio Real INSS", layout="wide")

st.title("üßÆ INSS C√°lculo Engine - Revis√£o da Vida Toda")
st.caption("Aplica√ß√£o baseada em engenharia reversa do c√°lculo previdenci√°rio, conforme Leis 8.213/91, 9.876/99 e INs.")

# ============================
# üì• Inputs CNIS e Carta
# ============================
st.sidebar.header("üìÇ Carregar Arquivos")

uploaded_cnis = st.sidebar.file_uploader("Importe o CSV do CNIS", type="csv")
uploaded_carta = st.sidebar.file_uploader("Importe o CSV da Carta de Benef√≠cio", type="csv")

# ============================
# Fun√ß√µes Auxiliares
# ============================
def limpar_dados(df, coluna_salario):
    df = df.dropna()
    df = df[df[coluna_salario].apply(lambda x: str(x).replace('.', '').replace(',', '').replace(' ', '').replace('e', '').replace('E', '').isnumeric())]
    df[coluna_salario] = df[coluna_salario].astype(float)
    return df

def aplicar_fuzzy(row):
    if "DESCONSIDERADO" in str(row):
        return 0.5
    return 1.0

def calcular_media_ponderada(df, coluna_salario, coluna_observacao=None):
    if coluna_observacao:
        df['Peso'] = df[coluna_observacao].apply(aplicar_fuzzy)
        return np.average(df[coluna_salario], weights=df['Peso'])
    else:
        return df[coluna_salario].mean()

def fator_previdenciario(Tc, a, Es, Id):
    return round((Tc * a / Es) * (1 + ((Id + Tc * a) / 100)), 4)

def salario_beneficio(media_salarios, FP):
    return round(media_salarios * FP, 2)

def renda_mensal_inicial(salario_beneficio, coef=1.0):
    return round(salario_beneficio * coef, 2)

# ============================
# Execu√ß√£o Principal
# ============================
if uploaded_cnis and uploaded_carta:

    st.success("‚úÖ Arquivos carregados com sucesso!")

    cnis_df = pd.read_csv(uploaded_cnis)
    carta_df = pd.read_csv(uploaded_carta)

    # Limpeza e sanitiza√ß√£o
    cnis_df = limpar_dados(cnis_df, cnis_df.columns[1])
    carta_df = limpar_dados(carta_df, carta_df.columns[2])

    # Exibi√ß√£o dos dados tratados
    st.subheader("üìÑ Dados CNIS - P√≥s-Sanitiza√ß√£o")
    st.dataframe(cnis_df)

    st.subheader("üìÑ Dados Carta - P√≥s-Sanitiza√ß√£o")
    st.dataframe(carta_df)

    # ============================
    # C√°lculo Fuzzy e Previdenci√°rio
    # ============================
    st.header("üî¢ C√°lculo Previdenci√°rio Real - Engenharia Reversa")

    media_cnis = calcular_media_ponderada(cnis_df, cnis_df.columns[1])
    media_carta = calcular_media_ponderada(carta_df, carta_df.columns[2], carta_df.columns[5])

    # Par√¢metros Legais Fixos
    Tc = 38 + (1/12) + (25/365)  # 38 anos, 1 m√™s, 25 dias
    a = 0.31
    Es = 21.8
    Id = 60
    coef = 1.0

    FP = fator_previdenciario(Tc, a, Es, Id)
    salario_benef = salario_beneficio(media_cnis, FP)
    renda_inicial = renda_mensal_inicial(salario_benef, coef)

    # Resultado
    st.write(f"**M√©dia CNIS (ponderada):** R$ {media_cnis:,.2f}")
    st.write(f"**M√©dia Carta (ponderada):** R$ {media_carta:,.2f}")
    st.write(f"**Fator Previdenci√°rio:** {FP}")
    st.write(f"**Sal√°rio de Benef√≠cio:** R$ {salario_benef:,.2f}")
    st.write(f"**Renda Mensal Inicial:** R$ {renda_inicial:,.2f}")

    # ============================
    # Identifica√ß√£o de Sal√°rios Cr√≠ticos
    # ============================
    st.subheader("üö© Sal√°rios Cr√≠ticos Identificados")

    desconsiderados = carta_df[carta_df.columns].apply(lambda x: x.astype(str).str.contains("DESCONSIDERADO", na=False)).any(axis=1)
    criticos = carta_df[desconsiderados]

    if not criticos.empty:
        st.dataframe(criticos)
        st.warning("Sal√°rios desconsiderados detectados! Podem impactar no valor final. Recomenda-se revis√£o jur√≠dica.")
    else:
        st.success("Nenhum sal√°rio desconsiderado identificado na carta.")

    # ============================
    # Exporta√ß√£o
    # ============================
    resultado_df = pd.DataFrame({
        'Fonte': ['CNIS', 'Carta'],
        'M√©dia dos 80% maiores sal√°rios': [media_cnis, media_carta],
        'Fator Previdenci√°rio': [FP, FP],
        'Sal√°rio de Benef√≠cio': [salario_benef, salario_benef],
        'Renda Mensal Inicial': [renda_inicial, renda_inicial]
    })

    st.download_button("üì• Baixar Resultado (CSV)", data=resultado_df.to_csv(index=False), file_name='resultado_inss.csv')

    # ============================
    # Explica√ß√£o do C√°lculo
    # ============================
    st.header("üìö Explica√ß√£o Detalhada do C√°lculo")
    st.markdown("""
    - **Base Legal:** Lei 8.213/91, Lei 9.876/99, EC 103/19.
    - **Tempo de Contribui√ß√£o (Tc):** 38 anos, 1 m√™s, 25 dias.
    - **Expectativa de Sobrevida (Es):** 21,8 anos (IBGE).
    - **Idade do Segurado (Id):** 60 anos.
    - **Al√≠quota Previdenci√°ria (a):** 31%.
    - **Coeficiente:** 100%.
    
    **F√≥rmula:**

    \[
    FP = \\left(\\frac{T_c \\times a}{E_s}\\right) \\times \\left(1 + \\frac{(I_d + T_c \\times a)}{100}\\right)
    \]

    Aplicado diretamente sobre as m√©dias ponderadas dos sal√°rios CNIS e Carta, respeitando integralmente os par√¢metros normativos.
    """)

else:
    st.info("üìÇ Aguarde o carregamento dos dois arquivos CSV (CNIS e Carta de Benef√≠cio) para iniciar o c√°lculo.")

